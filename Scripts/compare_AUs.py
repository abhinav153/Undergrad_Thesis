"""
Script for comparing AUs generated by different AU recognition software

Only a subset of AUs are shown
'AU1','AU2','AU4','AU5','AU6','AU7','AU9','AU10','AU12','AU14','AU15','AU17','AU20','AU23','AU25','AU26'
"""

import cv2
from pathlib import Path
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib import style
import numpy as np
import os

def showInMovedWindow(winname, img, x, y,frameno=0):
    '''
    Method for generating windows to display the data/video
    '''
    cv2.namedWindow(winname)        # Create a named window
    cv2.moveWindow(winname, x, y)   # Move it to (x,y)
    img = cv2.resize(img,(800,500))
    text = 'Frame No: '+str(frameno) + '_'+winname
    coordinates = (0,30)
    font = cv2.FONT_HERSHEY_SIMPLEX
    fontScale = 1
    color = (0,0,255)
    thickness = 1
    img = cv2.putText(img, text, coordinates, font, fontScale, color, thickness, cv2.LINE_AA)
    cv2.imshow(winname,img)

def update_data(csv_data,frame_count,graph):
    '''
    Method to extract the relevant AU data corresponding to a particular frame
    '''
    AU = csv_data[csv_data['frame']==frame_count][['AU01_r', 'AU02_r',
                'AU04_r', 'AU05_r', 'AU06_r', 'AU07_r', 'AU09_r', 'AU10_r', 'AU12_r',
                'AU14_r', 'AU15_r', 'AU17_r', 'AU20_r', 'AU23_r', 'AU25_r', 'AU26_r']]
    AU =  AU.values
    AU = AU.tolist()[0]
    
    for i,rect in enumerate(graph):
        rect.set_width(AU[i])

    return graph
def update_image(fig):
    '''
    Display new frame  with new data after updating AU data
    '''
     # redraw the canvas
    fig.canvas.draw()

    # convert canvas to image
    img = np.fromstring(fig.canvas.tostring_rgb(), dtype=np.uint8,
            sep='')
    img  = img.reshape(fig.canvas.get_width_height()[::-1] + (3,))

    # img is rgb, convert to opencv's default bgr
    img = cv2.cvtColor(img,cv2.COLOR_RGB2BGR)

    return img

def render_screen(graph1,graph2,graph3,csv1,csv2,csv3,fig1,fig2,fig3,frame_count):
    '''
    Render all new windows after the updates are done
    '''
    graph1 = update_data(csv1,frame_count,graph1)
    graph2 = update_data(csv2,frame_count,graph2)
    graph3 = update_data(csv3,frame_count,graph3)

    img1   = update_image(fig1)
    img2   = update_image(fig2)
    img3   = update_image(fig3)


    showInMovedWindow(file,frame,0,0,frame_count)
    showInMovedWindow(csv_files[0].parts[-1].split('_')[0],img1,800,0,frame_count)
    showInMovedWindow(csv_files[1].parts[-1].split('_')[0],img2,800,500,frame_count)
    showInMovedWindow(csv_files[2].parts[-1].split('_')[0],img3,800,1000,frame_count)
    showInMovedWindow(render_files[0].parts[-1].split('_')[0]+'_viz',frame1,1600,0,frame_count)
    showInMovedWindow(render_files[1].parts[-1].split('_')[0]+'_viz',frame2,1600,500,frame_count)
    showInMovedWindow(render_files[2].parts[-1].split('_')[0]+'_viz',frame3,1600,1000,frame_count)
    


#read the video files you want to visualize
videofiles = list(Path('Demonstration/Videos').glob("*.mp4"))

print("Choose file for comparision")
for i,file in enumerate(videofiles):
    print(f"{i}:{file.parts[-1]}")

index = int(input("Index:"))

file = videofiles[index].parts[-1].split('.')[0]
print(f'Chosen file: {file}')
print(f'filepath:{str(videofiles[index])}')

#get csv filepaths for corresponding chosen video
csv_files = list(Path('Demonstration/Post-processed/').glob(f"*{file}.csv"))

print(' \n Choose visualization software')
viz_software_list = os.listdir('Demonstration/Rendered_Animations')
for i,viz_software in enumerate(viz_software_list):
    print(f'{i}:{viz_software}')

index_viz = int(input('Index:'))
viz_software = viz_software_list[index_viz]
print('Chosen visualization software: ',viz_software)

multipliers = os.listdir('Demonstration/Rendered_Animations/'+viz_software)
print('\n Choose Intensity for comparision')
for i,multiplier in enumerate (multipliers):
    print(f'{i}:{multiplier}')
index_mul = int(input('Index:'))
multiplier = multipliers[index_mul]
print('Chosen Multiplier:',multiplier)

render_files = list(Path('Demonstration/Rendered_Animations/'+viz_software + '/' + multiplier).glob(f'*{file}.mp4'))
print('\n files chosen')
for render_file in render_files:
    print(render_file)

vid = cv2.VideoCapture(str(videofiles[index]))
vid1 = cv2.VideoCapture(str(render_files[0]))
vid2 = cv2.VideoCapture(str(render_files[1]))
vid3 = cv2.VideoCapture(str(render_files[2]))
frame_count = 0
total_frames = int(vid.get(cv2.CAP_PROP_FRAME_COUNT))
print('\n Total Frames: ',total_frames)


style.use('fivethirtyeight')

fig1 = plt.figure()
fig2 = plt.figure()
fig3 = plt.figure()
ax1 = fig1.add_subplot(1,1,1)
ax2 = fig2.add_subplot(1,1,1)
ax3  = fig3.add_subplot(1,1,1)
labels = ['AU01_Inner brow raiser', 
          'AU02_Outer brow raiser',
          'AU04_Brow lowerer', 
          'AU05_Upper lid raiser', 
          'AU06_Cheek raiser', 
          'AU07_Lid tightener', 
          'AU09_Nose wrinkler', 
          'AU10_Upper lip raiser', 
          'AU12_Lip corner puller',
          'AU14_Dimpler', 
          'AU15_Lip corner depressor', 
          'AU17_Chin raiser', 
          'AU20_Lip stretcher', 
          'AU23_Lip tightener', 
          'AU25_Lips part', 
          'AU26_Jaw drop']

data = [ 0 for i in range(len(labels)) ]
graph1 = ax1.barh(labels,data)
graph2 = ax2.barh(labels,data)
graph3 = ax3.barh(labels,data)
ax1.set_xbound(0,1)
ax2.set_xbound(0,1)
ax3.set_xbound(0,1)
fig1.tight_layout()
fig2.tight_layout()
fig3.tight_layout()


pause = False


csv1 = pd.read_csv(csv_files[0])
csv2 = pd.read_csv(csv_files[1])
csv3 = pd.read_csv(csv_files[2])

while True:

    if pause is not True:
        _,frame   = vid.read()
        _1,frame1 = vid1.read()
        _2,frame2 = vid2.read()
        _3,frame3 = vid3.read()


        if _ and _1 and _2 and _3:
            render_screen(graph1,graph2,graph3,csv1,csv2,csv3,fig1,fig2,fig3,frame_count)
            frame_count+=1
        
        else:
            vid.set(cv2.CAP_PROP_POS_FRAMES,0)
            vid1.set(cv2.CAP_PROP_POS_FRAMES,0)
            vid2.set(cv2.CAP_PROP_POS_FRAMES,0)
            vid3.set(cv2.CAP_PROP_POS_FRAMES,0)
            frame_count = 0

    key = cv2.waitKey(1)

    if key == ord('q'):
        break

    elif key == ord('p'):
        pause = not pause

    elif key == ord('n') and pause:
        print('Detected command for next key frame')
        frame_count+=1
        if frame_count > total_frames-1:
            frame_count=0
        vid.set(cv2.CAP_PROP_POS_FRAMES,frame_count)
        vid1.set(cv2.CAP_PROP_POS_FRAMES,frame_count)
        vid2.set(cv2.CAP_PROP_POS_FRAMES,frame_count)
        vid3.set(cv2.CAP_PROP_POS_FRAMES,frame_count)
        _,frame = vid.read()
        _1,frame1 = vid1.read()
        _2,frame2 = vid2.read()
        _3,frame3 = vid3.read()

        render_screen(graph1,graph2,graph3,csv1,csv2,csv3,fig1,fig2,fig3,frame_count)
       
    elif key == ord('b') and pause:
        print('Detected command for previous key frame')
        frame_count-=1
        if frame_count < 0:
            frame_count = total_frames-1 
        vid.set(cv2.CAP_PROP_POS_FRAMES,frame_count)
        vid1.set(cv2.CAP_PROP_POS_FRAMES,frame_count)
        vid2.set(cv2.CAP_PROP_POS_FRAMES,frame_count)
        vid3.set(cv2.CAP_PROP_POS_FRAMES,frame_count)
        _,frame = vid.read()
        _1,frame1 = vid1.read()
        _2,frame2 = vid2.read()
        _3,frame3 = vid3.read()

        render_screen(graph1,graph2,graph3,csv1,csv2,csv3,fig1,fig2,fig3,frame_count)
    else:
        continue




vid.release()
vid1.release()
vid2.release()
vid3.release()
cv2.destroyAllWindows()