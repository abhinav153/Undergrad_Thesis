'''
This script is used to convert the the input csv files to csv files appropriate to be fed to the facsvatar
Simultaneously files are also being saved with non converted files retaining all action units for each software
'''
import pandas as pd
import numpy as np
import glob
import argparse
from pathlib import Path
from  modules.input_facsfromcsv.openfacefiltercsv import FilterCSV
class CSVFilter:

    def __init__(self,file:str,dir:str,type:str) -> None:
        '''
        Create an object to that will have methods to filter files based on type
        '''
        
        if file:
            self.file = Path(file)
        else:
            self.file = None
        self.dir = Path(dir)
        self.type = type


    def filter(self):

        if self.type == 'Imotions':
            self.Imotions_filter()

        elif self.type == 'OpenFace':
            self.OpenFace_filter()

        else:
            self.FaceReader_filter()


    def Imotions_filter(self):
        '''
        Filters the Action unit data drom the Imotion software generated data file
        and saves it to post processed directory
        '''

        files = None
        if self.file:
            files = self.file
        else:
            files = self.dir.glob('Imotions/*.csv')
        for file in files:
            filename = str(file).split('\\')[-1]
            df = pd.read_csv(file,header=24)
            df_non_facsvatar = df.copy(deep=True)
            
            #get row number from where our frames start
            row_index = df.index[(df['SourceStimuliName']=='FaceRecording-1') & (df['FrameNo']==0)].to_list()[0]
            row_index = df_non_facsvatar.index[(df['SourceStimuliName']=='FaceRecording-1') & (df['FrameNo']==0)].to_list()[0]
            df = df[row_index:]
            df_non_facsvatar = df_non_facsvatar[row_index:]

            row_index = df.index[df['SlideEvent']=='EndSlide']
            if pd.isna(df.loc[row_index-1]['FrameNo']).all():
                df.drop(row_index-1,inplace=True)
                df.drop(row_index,inplace=True)
                df_non_facsvatar.drop(row_index-1,inplace=True)
                df_non_facsvatar.drop(row_index,inplace=True)
            else:
                df.drop(row_index,inplace=True)
                df_non_facsvatar.drop(row_index,inplace=True)

            #Extract relevant columns
            #Extracted only those AU's which are present on cleaned csv files produced by FACSvatar
            #AU45 is missing so we will add it to the dataframe and zero out all rows
            df = df[['Timestamp','FrameNo','AU1','AU2','AU4','AU5','AU6','AU7','AU9','AU10','AU12','AU14','AU15','AU17','AU20','AU23','AU25','AU26']]

            #reorder columns
            df =  df[['FrameNo', 'Timestamp','AU1', 'AU2', 'AU4', 'AU5', 'AU6', 'AU7', 'AU9',
        'AU10', 'AU12', 'AU14', 'AU15', 'AU17', 'AU20', 'AU23', 'AU25', 'AU26']]
            
            #extract all AUs for non facsvatar file
            df_non_facsvatar = df_non_facsvatar[['FrameNo', 'Timestamp','AU1', 'AU2', 'AU4', 'AU5', 'AU6', 'AU7', 'AU9',
        'AU10', 'AU12', 'AU14', 'AU15', 'AU17', 'AU18','AU20', 'AU23', 'AU24','AU25', 'AU26','AU28','AU43']]
            
            #add other columns as required such as gaze angle and pose and zero them out as required by FACSvatar
            df.insert(2,'confidence',1.0) #Imotions only gives AU readings when it has found a FACE
            df.insert(3,'success',1)
            df.insert(4,'gaze_angle_x',0.0)
            df.insert(5,'gaze_angle_y',0.0)
            df.insert(6,'pose_Rx',0.0)
            df.insert(7,'pose_Ry',0.0)
            df.insert(8,'pose_Rz',0.0)
            df.insert(25,'AU45_r',0.0)

            #Rename columns to match the ones generated by FACSvatar, examples can be seen in openface/default_clean directory
            df= df.rename(columns={
                            'AU1':'AU01_r',
                            'AU2':'AU02_r',
                            'AU4':'AU04_r',
                            'AU5':'AU05_r',
                            'AU6':'AU06_r',
                            'AU7':'AU07_r',
                            'AU9':'AU09_r',
                            'AU10':'AU10_r',
                            'AU12':'AU12_r',
                            'AU14':'AU14_r',
                            'AU15':'AU15_r',
                            'AU17':'AU17_r',
                            'AU20':'AU20_r',
                            'AU23':'AU23_r',
                            'AU25':'AU25_r',
                            'AU26':'AU26_r',
                            'FrameNo':'frame',
                            'Timestamp':'timestamp'
                            } )
            
            df_non_facsvatar = df_non_facsvatar.rename(columns={'FrameNo':'frame'})
            #fill NAN rows with 0
            df = df.fillna(0)
            df_non_facsvatar = df_non_facsvatar.fillna(-np.Inf) #filling with negative infinity values so that they get transformed to zero

            #format frame no from float to int  
            df['frame'] = df['frame'].apply(int)


            #transform log logarithmic scores to probabilities/intensity in 0-1 range
            df[['AU01_r', 'AU02_r',
                'AU04_r', 'AU05_r', 'AU06_r', 'AU07_r', 'AU09_r', 'AU10_r', 'AU12_r',
                'AU14_r', 'AU15_r', 'AU17_r', 'AU20_r', 'AU23_r', 'AU25_r', 'AU26_r']] = df[['AU01_r', 'AU02_r',
                'AU04_r', 'AU05_r', 'AU06_r', 'AU07_r', 'AU09_r', 'AU10_r', 'AU12_r',
                'AU14_r', 'AU15_r', 'AU17_r', 'AU20_r', 'AU23_r', 'AU25_r', 'AU26_r']].apply(lambda x : 1/(1+pow(10,-x)))
            
            df_non_facsvatar[['AU1', 'AU2', 'AU4', 'AU5', 'AU6', 'AU7', 'AU9',
             'AU10', 'AU12', 'AU14', 'AU15', 'AU17', 'AU18','AU20', 'AU23', 'AU24','AU25', 'AU26','AU28','AU43']]=df_non_facsvatar[['AU1', 'AU2', 'AU4', 'AU5', 'AU6', 'AU7', 'AU9',
             'AU10', 'AU12', 'AU14', 'AU15', 'AU17', 'AU18','AU20', 'AU23', 'AU24','AU25', 'AU26','AU28','AU43']].apply(lambda x : 1/(1+pow(10,-x)))

            df['timestamp'] = [i/100 for i in range(0,len(df)*4,4)]
            
            df.to_csv('Demonstration/Post-processed/'+self.type+'_'+filename,index=False)
            df_non_facsvatar.to_csv('Demonstration/Post-processed_non_facsvatar/'+self.type+'_'+filename,index=False)



    def OpenFace_filter(self):
        '''
        Filters the Action unit data drom the Imotion software generated data file
        and saves it to post processed directory
        '''

        #adapted from modules/inputfacsfromcsv/OpenfaceFilter.py
        
        if self.file:
            files = self.file
        else:
            files = self.dir.glob('OpenFace/*.csv')

        for file in files:
            filename = str(file).split('\\')[-1]
            openface_filter = FilterCSV()
            openface_filter.df_csv = pd.read_csv(file)
            openface_filter.clean_header_space()
            openface_filter.clean_columns()
            openface_filter.match_index_frame()
            openface_filter.reset_au_interval()
            openface_filter.df_csv[['gaze_angle_x','gaze_angle_y','pose_Rx','pose_Ry','pose_Rz']] = 0.0  #zeroing out head rotation for uniformity
            openface_filter.df_csv.to_csv('Demonstration/Post-processed/'+self.type+'_'+filename,index=False)

            #rename columns
            openface_filter.df_csv= openface_filter.df_csv.rename(columns={
                            'AU01_r':'AU1',
                            'AU02_r':'AU2',
                            'AU04_r':'AU4',
                            'AU05_r':'AU5',
                            'AU06_r':'AU6',
                            'AU07_r':'AU7',
                            'AU09_r':'AU9',
                            'AU10_r':'AU10',
                            'AU12_r':'AU12',
                            'AU14_r':'AU14',
                            'AU15_r':'AU15',
                            'AU17_r':'AU17',
                            'AU20_r':'AU20',
                            'AU23_r':'AU23',
                            'AU25_r':'AU25',
                            'AU26_r':'AU26',
                            'AU45_r':'AU45'
                            } )

            openface_filter.df_csv.to_csv('Demonstration/Post-processed_non_facsvatar/'+self.type+'_'+filename,index=False)

        
    def FaceReader_filter(self):
        '''
        Filters the Action unit data drom the Imotion software generated data file
        and saves it to post processed directory
        '''
        files = None
        if self.file:
            files = self.file
        else:
            files = self.dir.glob('FaceReader/*_detailed.xlsx')

        for file in files:
            df = pd.read_excel(file,header=5)
            df_non_facsvatar = df.copy(deep=True)
            filename = df.columns[1].split('\\')[-1].split('.')[0]
            df.columns = df.iloc[6]
            df_non_facsvatar.columns = df_non_facsvatar.iloc[6]
            df = df[7:]
            df_non_facsvatar = df_non_facsvatar[7:]
           
            #extract necessary columns
            df = df[[ 'Action Unit 01 - Inner Brow Raiser',
            'Action Unit 02 - Outer Brow Raiser', 
            'Action Unit 04 - Brow Lowerer',
            'Action Unit 05 - Upper Lid Raiser', 
            'Action Unit 06 - Cheek Raiser',
            'Action Unit 07 - Lid Tightener', 
            'Action Unit 09 - Nose Wrinkler',
            'Action Unit 10 - Upper Lip Raiser',
            'Action Unit 12 - Lip Corner Puller', 
            'Action Unit 14 - Dimpler',
            'Action Unit 15 - Lip Corner Depressor', 
            'Action Unit 17 - Chin Raiser',
            'Action Unit 20 - Lip Stretcher',
            'Action Unit 23 - Lip Tightener',
            'Action Unit 25 - Lips Part', 
            'Action Unit 26 - Jaw Drop',]]

            df_non_facsvatar = df_non_facsvatar[[ 'Action Unit 01 - Inner Brow Raiser',
            'Action Unit 02 - Outer Brow Raiser', 
            'Action Unit 04 - Brow Lowerer',
            'Action Unit 05 - Upper Lid Raiser', 
            'Action Unit 06 - Cheek Raiser',
            'Action Unit 07 - Lid Tightener', 
            'Action Unit 09 - Nose Wrinkler',
            'Action Unit 10 - Upper Lip Raiser',
            'Action Unit 12 - Lip Corner Puller', 
            'Action Unit 14 - Dimpler',
            'Action Unit 15 - Lip Corner Depressor', 
            'Action Unit 17 - Chin Raiser',
            'Action Unit 18 - Lip Pucker',
            'Action Unit 20 - Lip Stretcher',
            'Action Unit 23 - Lip Tightener',
            'Action Unit 24 - Lip Pressor',
            'Action Unit 25 - Lips Part', 
            'Action Unit 26 - Jaw Drop',
            'Action Unit 27 - Mouth Stretch',
            'Action Unit 43 - Eyes Closed']]

            #adding other necessary columns 
            #add other columns as required such as gaze angle and pose and zero them out as required by FACSvatar
            df.insert(0,'frame',[int(i) for i in range(len(df))])
            df_non_facsvatar.insert(0,'frame',[int(i) for i in range(len(df))])
            df.insert(1,'timestamp',[i/100 for i in range(0,len(df)*4,4)])
            df.insert(2,'confidence',1.0) #Imotions only gives AU readings when it has found a FACE
            df.insert(3,'success',1)
            df.insert(4,'gaze_angle_x',0.0)
            df.insert(5,'gaze_angle_y',0.0)
            df.insert(6,'pose_Rx',0.0)
            df.insert(7,'pose_Ry',0.0)
            df.insert(8,'pose_Rz',0.0)
            df.insert(25,'AU45_r',0.0)

            #reaname columns
            df = df.rename(columns = 
                        {
            'Action Unit 01 - Inner Brow Raiser':'AU01_r',
            'Action Unit 02 - Outer Brow Raiser':'AU02_r', 
            'Action Unit 04 - Brow Lowerer':"AU04_r",
            'Action Unit 05 - Upper Lid Raiser':'AU05_r', 
            'Action Unit 06 - Cheek Raiser':'AU06_r',
            'Action Unit 07 - Lid Tightener':'AU07_r', 
            'Action Unit 09 - Nose Wrinkler':'AU09_r',
            'Action Unit 10 - Upper Lip Raiser':'AU10_r',
            'Action Unit 12 - Lip Corner Puller':'AU12_r', 
            'Action Unit 14 - Dimpler':'AU14_r',
            'Action Unit 15 - Lip Corner Depressor':'AU15_r', 
            'Action Unit 17 - Chin Raiser':'AU17_r',
            'Action Unit 20 - Lip Stretcher':'AU20_r',
            'Action Unit 23 - Lip Tightener':'AU23_r',
            'Action Unit 25 - Lips Part':'AU25_r', 
            'Action Unit 26 - Jaw Drop':'AU26_r',

                        
                        })
            
            df_non_facsvatar = df_non_facsvatar.rename(columns=
                                                       {
            'Action Unit 01 - Inner Brow Raiser':'AU1',
            'Action Unit 02 - Outer Brow Raiser':'AU2', 
            'Action Unit 04 - Brow Lowerer':'AU4',
            'Action Unit 05 - Upper Lid Raiser':'AU5', 
            'Action Unit 06 - Cheek Raiser':'AU6',
            'Action Unit 07 - Lid Tightener':'AU7', 
            'Action Unit 09 - Nose Wrinkler':'AU9',
            'Action Unit 10 - Upper Lip Raiser':'AU10',
            'Action Unit 12 - Lip Corner Puller':'AU12', 
            'Action Unit 14 - Dimpler':'AU14',
            'Action Unit 15 - Lip Corner Depressor':'AU15', 
            'Action Unit 17 - Chin Raiser':'AU17',
            'Action Unit 18 - Lip Pucker':'AU18',
            'Action Unit 20 - Lip Stretcher':'AU20',
            'Action Unit 23 - Lip Tightener':'AU23',
            'Action Unit 24 - Lip Pressor':'AU24',
            'Action Unit 25 - Lips Part':'AU25', 
            'Action Unit 26 - Jaw Drop':'AU26',
            'Action Unit 27 - Mouth Stretch':'AU27',
            'Action Unit 43 - Eyes Closed':'AU43'
                                                       })

            df.to_csv('Demonstration/Post-processed/'+self.type+'_'+filename.split('.')[0] + '.csv',index=False)
            df_non_facsvatar.to_csv('Demonstration/Post-processed_non_facsvatar/'+self.type+'_'+filename.split('.')[0] + '.csv',index=False)

if __name__ == '__main__':
        
        #command line arguments
        parser = argparse.ArgumentParser()

        parser.add_argument('-d','--dir',default = 'Demonstration/Pre-processed/',help = 'path to preprocess directory')
        parser.add_argument('-f','--file',help = 'path to file to process')
        parser.add_argument('-t','--type',choices=['Imotions','OpenFace','FaceReader'],default='OpenFace',help = 'data generated by Action unit software to be converted ')

        args , leftovers = parser.parse_known_args()
        print("The following arguments are used: {}".format(args))
        print("The following arguments are ignored: {}\n".format(leftovers))

        filter = CSVFilter(**vars(args))
        filter.filter()
